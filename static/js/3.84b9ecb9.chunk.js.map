{"version":3,"sources":["components/EditTodoForm/index.js","containers/TodoDetails/index.js"],"names":["EditTodoForm","onClose","todo","forceRefreshTodo","useRefreshReques","requestIDtodo","forceRefreshTodos","requestIDtodos","useForm","register","handleSubmit","errors","formState","title","completed","handleUpdateTask","a","data","updateTodo","newData","then","res","onSubmit","sx","justifyContent","aria-label","type","onClick","as","required","minLength","maxLength","placeholder","rows","defaultValue","defaultChecked","ml","height","color","fontSize","EditTodoFormModal","WithModal","TodoDetails","id","useParams","history","useHistory","useState","showModal","setShowModal","useRecoilValue","todoResponseState","created_at","updated_at","user_id","name","getUserQuery","handleToggleModal","alignItems","minHeight","backgroundColor","borderRadius","padding","flexBasis","m","textAlign","fontWeight","textTransform","flexWrap","handleDateToString","mt","e","goBack","mb","variant","mr","deleteTodo","push","isOpen"],"mappings":"qOAmGeA,MAjFf,YAA0C,IAAD,IAAjBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KACzBC,EAAmBC,YAAiBC,KACpCC,EAAoBF,YAAiBG,KAFJ,EAOnCC,cAHFC,EAJqC,EAIrCA,SACAC,EALqC,EAKrCA,aACaC,EANwB,EAMrCC,UAAaD,OAEPE,EAAqBX,EAArBW,MAAOC,EAAcZ,EAAdY,UAETC,EAAgB,uCAAG,+BAAAC,EAAA,iEAASC,YAAT,MAAgB,GAAhB,WACVC,YAAW,CAAEhB,OAAMiB,QAASF,IAAQG,MAAK,SAACC,GAAD,OAASA,KADxC,mFAAH,sDAUtB,OACE,uBAAMC,SAAUZ,GARW,SAACO,GAC5BF,EAAiB,CAAEE,SACnBd,IACAG,IACAL,OAIA,UACE,cAAC,IAAD,CAAMsB,GAAI,CAAEC,eAAgB,YAA5B,SACE,cAAC,IAAD,CAAOC,aAAW,gBAAgBC,KAAK,SAASC,QAAS1B,MAE3D,cAAC,IAAD,CAAS2B,GAAG,KAAZ,qCACA,cAAC,IAAD,2BACMnB,EAAS,QAAS,CAAEoB,UAAU,EAAMC,UAAW,EAAGC,UAAW,OADnE,IAEEC,YAAY,kCACZC,KAAM,GACNC,aAAcrB,KAEhB,cAAC,IAAD,CAAMU,GAAI,CAAEC,eAAgB,UAA5B,SACE,eAAC,IAAD,CAAOD,GAAI,CAAEC,eAAgB,UAA7B,2BAEE,cAAC,IAAD,2BACMf,EAAS,cADf,IAEE0B,eAAgBrB,EAChBS,GAAI,CAAEa,GAAI,gBAIhB,eAAC,IAAD,CACEb,GAAI,CACFC,eAAgB,SAChBa,OAAQ,OACRC,MAAO,MACPC,SAAU,QALd,UAQ2B,cAAlB,OAAN5B,QAAM,IAANA,GAAA,UAAAA,EAAQE,aAAR,eAAea,OAAuB,yCACd,eAAlB,OAANf,QAAM,IAANA,GAAA,UAAAA,EAAQE,aAAR,eAAea,OACd,mDAEJ,cAAC,IAAD,CAAMH,GAAI,CAAEC,eAAgB,YAA5B,SACE,cAAC,IAAD,CAAQC,aAAW,4BAA4BC,KAAK,SAApD,0B,uBCtDFc,EAAoBC,YAAUzC,GAkHrB0C,UAhHf,WACE,IAAMpC,EAAoBF,YAAiBG,KACnCoC,EAAOC,cAAPD,GACFE,EAAUC,cAHK,EAIaC,oBAAS,GAJtB,mBAIdC,EAJc,KAIHC,EAJG,KAKf/C,EAAOgD,YAAeC,YAAkBR,IACtC9B,EAAsDX,EAAtDW,MAAOuC,EAA+ClD,EAA/CkD,WAAYC,EAAmCnD,EAAnCmD,WAAYvC,EAAuBZ,EAAvBY,UAAWwC,EAAYpD,EAAZoD,QAE1CC,EADKL,YAAeM,YAAaF,IACjCC,KAKFE,EAAoB,WACxBR,GAAcD,IAQhB,OACE,eAAC,IAAD,CACEzB,GAAI,CACFC,eAAgB,SAChBkC,WAAY,SACZC,UAAW,QAJf,UAOE,eAAC,IAAD,CACEpC,GAAI,CACFqC,gBAAiB,QACjBC,aAAc,MACdC,QAAS,CAAC,iBAAkB,kBAC5BC,UAAW,CAAC,MAAO,MAAO,MAAO,OACjCzB,MAAO,SANX,UASE,cAAC,IAAD,CAASV,GAAG,KAAZ,uCACA,eAAC,IAAD,CACEL,GAAI,CACFyC,EAAG,WACHC,UAAW,OACXC,WAAY,OACZC,cAAe,QAEjBvC,GAAG,KAPL,UASE,4CATF,IASiBf,KAEjB,eAAC,IAAD,CACEU,GAAI,CACFyC,EAAG,WACHC,UAAW,OACXC,WAAY,OACZC,cAAe,QAEjBvC,GAAG,KAPL,UASE,iDATF,IASsBd,EAAY,MAAQ,SAE1C,eAAC,IAAD,CACES,GAAI,CACFyC,EAAG,WACHC,UAAW,OACXC,WAAY,OACZC,cAAe,QAEjBvC,GAAG,KAPL,UASE,2CATF,IASkB2B,KAElB,eAAC,IAAD,CAAMhC,GAAI,CAAEC,eAAgB,gBAAiB4C,SAAU,QAAvD,UACE,eAAC,IAAD,WACE,4CACCC,YAAmBjB,MAEtB,eAAC,IAAD,WACE,+CACCiB,YAAmBhB,SAGxB,eAAC,IAAD,CACE9B,GAAI,CAAEC,eAAgB,gBAAiB4C,SAAU,OAAQE,GAAI,QAD/D,UAGE,cAAC,IAAD,CAAQ3C,QA5EK,SAAC4C,GACpB1B,EAAQ2B,UA2E6BjD,GAAI,CAAEkD,GAAI,QAAzC,uBAGA,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,QAAQ,UACRnD,GAAI,CAAEoD,GAAI,QACVhD,QA7Ea,SAAC4C,GACxBK,YAAW,CAAE1E,SACbI,IACAuC,EAAQgC,KAAK,MAuEL,uBAOA,cAAC,IAAD,CAAQH,QAAQ,YAAY/C,QAAS8B,EAArC,6BAMN,cAACjB,EAAD,CACEtC,KAAMA,EACN4E,OAAQ9B,EACR/C,QAASwD","file":"static/js/3.84b9ecb9.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Flex,\r\n  Textarea,\r\n  Close,\r\n  Heading,\r\n  Checkbox,\r\n  Label,\r\n  Button,\r\n} from 'theme-ui';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { updateTodo } from '../../api/todos';\r\n\r\n// Recoil\r\nimport { useRefreshReques } from '../../hook/useRefreshReques';\r\nimport { requestIDtodo, requestIDtodos } from '../../recoil/todo';\r\n\r\nfunction EditTodoForm({ onClose, todo }) {\r\n  const forceRefreshTodo = useRefreshReques(requestIDtodo);\r\n  const forceRefreshTodos = useRefreshReques(requestIDtodos);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const { title, completed } = todo;\r\n\r\n  const handleUpdateTask = async ({ data = {} }) => {\r\n    return await updateTodo({ todo, newData: data }).then((res) => res);\r\n  };\r\n  const handleSubmitEditTask = (data) => {\r\n    handleUpdateTask({ data });\r\n    forceRefreshTodo();\r\n    forceRefreshTodos();\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(handleSubmitEditTask)}>\r\n      <Flex sx={{ justifyContent: 'flex-end' }}>\r\n        <Close aria-label='Zamknij modal' type='button' onClick={onClose} />\r\n      </Flex>\r\n      <Heading as='h3'>Treść zadania</Heading>\r\n      <Textarea\r\n        {...register('title', { required: true, minLength: 1, maxLength: 200 })}\r\n        placeholder='Wpisz nową treść'\r\n        rows={10}\r\n        defaultValue={title}\r\n      />\r\n      <Flex sx={{ justifyContent: 'center' }}>\r\n        <Label sx={{ justifyContent: 'center' }}>\r\n          Ukończone\r\n          <Checkbox\r\n            {...register('completed')}\r\n            defaultChecked={completed}\r\n            sx={{ ml: '10px' }}\r\n          />\r\n        </Label>\r\n      </Flex>\r\n      <Flex\r\n        sx={{\r\n          justifyContent: 'center',\r\n          height: '16px',\r\n          color: 'red',\r\n          fontSize: '12px',\r\n        }}\r\n      >\r\n        {errors?.title?.type === 'required' && 'Zadanie musi mieć treść'}\r\n        {errors?.title?.type === 'maxLength' &&\r\n          'Zadanie może mieć max 200 znaków'}\r\n      </Flex>\r\n      <Flex sx={{ justifyContent: 'flex-end' }}>\r\n        <Button aria-label='Zapisz edytowanie zadanie' type='submit'>\r\n          Zapisz\r\n        </Button>\r\n      </Flex>\r\n    </form>\r\n  );\r\n}\r\n\r\nEditTodoForm.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  todo: PropTypes.exact({\r\n    completed: PropTypes.bool,\r\n    created_at: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.instanceOf(Date),\r\n    ]),\r\n    updated_at: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.instanceOf(Date),\r\n    ]),\r\n    id: PropTypes.number,\r\n    title: PropTypes.string,\r\n    user_id: PropTypes.number,\r\n  }).isRequired,\r\n};\r\n\r\nexport default EditTodoForm;\r\n","import React, { useState } from 'react';\r\nimport { Flex, Box, Heading, Button } from 'theme-ui';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { handleDateToString } from '../../utils';\r\nimport { deleteTodo } from '../../api/todos';\r\n\r\n// Components\r\nimport EditTodoForm from '../../components/EditTodoForm';\r\n\r\n// Hocs\r\nimport WithModal from '../../hoc/WithModal';\r\n\r\n// Recoil\r\nimport { useRecoilValue } from 'recoil';\r\nimport { todoResponseState } from '../../recoil/todo';\r\nimport { getUserQuery } from '../../recoil/user';\r\nimport { useRefreshReques } from '../../hook/useRefreshReques';\r\nimport { requestIDtodos } from '../../recoil/todo';\r\n// Modal\r\nconst EditTodoFormModal = WithModal(EditTodoForm);\r\n\r\nfunction TodoDetails() {\r\n  const forceRefreshTodos = useRefreshReques(requestIDtodos);\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const [showModal, setShowModal] = useState(false);\r\n  const todo = useRecoilValue(todoResponseState(id));\r\n  const { title, created_at, updated_at, completed, user_id } = todo;\r\n  const user = useRecoilValue(getUserQuery(user_id));\r\n  const { name } = user;\r\n\r\n  const handleGoBack = (e) => {\r\n    history.goBack();\r\n  };\r\n  const handleToggleModal = () => {\r\n    setShowModal(!showModal);\r\n  };\r\n  const handleDeleteTask = (e) => {\r\n    deleteTodo({ todo });\r\n    forceRefreshTodos();\r\n    history.push('/');\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      sx={{\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        minHeight: '90vh',\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          backgroundColor: 'muted',\r\n          borderRadius: '5px',\r\n          padding: ['30px 10px 20px', '50px 20px 20px'],\r\n          flexBasis: ['95%', '85%', '50%', '35%'],\r\n          color: 'forms',\r\n        }}\r\n      >\r\n        <Heading as='h1'>Szczegóły zadania</Heading>\r\n        <Heading\r\n          sx={{\r\n            m: '20px 0px',\r\n            textAlign: 'left',\r\n            fontWeight: 'text',\r\n            textTransform: 'none',\r\n          }}\r\n          as='h2'\r\n        >\r\n          <b>Tytuł:</b> {title}\r\n        </Heading>\r\n        <Heading\r\n          sx={{\r\n            m: '20px 0px',\r\n            textAlign: 'left',\r\n            fontWeight: 'text',\r\n            textTransform: 'none',\r\n          }}\r\n          as='h2'\r\n        >\r\n          <b>Zakończone:</b> {completed ? 'Tak' : 'Nie'}\r\n        </Heading>\r\n        <Heading\r\n          sx={{\r\n            m: '20px 0px',\r\n            textAlign: 'left',\r\n            fontWeight: 'text',\r\n            textTransform: 'none',\r\n          }}\r\n          as='h2'\r\n        >\r\n          <b>Twórca:</b> {name}\r\n        </Heading>\r\n        <Flex sx={{ justifyContent: 'space-between', flexWrap: 'wrap' }}>\r\n          <Box>\r\n            <b>Utworzono: </b>\r\n            {handleDateToString(created_at)}\r\n          </Box>\r\n          <Box>\r\n            <b>Aktualizacja: </b>\r\n            {handleDateToString(updated_at)}\r\n          </Box>\r\n        </Flex>\r\n        <Flex\r\n          sx={{ justifyContent: 'space-between', flexWrap: 'wrap', mt: '15px' }}\r\n        >\r\n          <Button onClick={handleGoBack} sx={{ mb: '15px' }}>\r\n            Powrót\r\n          </Button>\r\n          <Box>\r\n            <Button\r\n              variant='deleted'\r\n              sx={{ mr: '15px' }}\r\n              onClick={handleDeleteTask}\r\n            >\r\n              Usuń\r\n            </Button>\r\n            <Button variant='secondary' onClick={handleToggleModal}>\r\n              Edytuj\r\n            </Button>\r\n          </Box>\r\n        </Flex>\r\n      </Box>\r\n      <EditTodoFormModal\r\n        todo={todo}\r\n        isOpen={showModal}\r\n        onClose={handleToggleModal}\r\n      />\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default TodoDetails;\r\n"],"sourceRoot":""}